// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  email      String  @unique
  userName   String  @unique
  password   String
  profilePic String?

  otp   OTP?    @relation(fields: [otpId], references: [id])
  otpId String?

  posts        Post[]
  votes        Vote[]
  comments     Comment[]
  likes        Like[]
  following    Follow[]  @relation("User")
  followers    Follow[]  @relation("Creator")
  followedTags Tag[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model OTP {
  id  String @id @default(uuid())
  otp Int

  user      User[]
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Post {
  id String @id @default(uuid())

  content String
  tags    Tag[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  comments Comment[]
  likes    Like[]
  votes    Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id    String @id @default(uuid())
  name  String
  color String

  posts     Post[]
  followers User[]

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Vote {
  id String @id @default(uuid())

  voteType VoteType

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id String @id @default(uuid())

  content String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Like {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Follow {
  id String @id @default(uuid())

  user   User   @relation("User", fields: [userId], references: [id])
  userId String

  creator   User   @relation("Creator", fields: [creatorId], references: [id])
  creatorId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([userId, creatorId])
}

enum VoteType {
  great
  good
  ok
  bad
}
